"==============Функции================"
# функция - именованный блок кода ,который может принимать аргументы и возвращать результат 

def my_sum(a, b):
    a +b 
res = my_sum(5, 4)
print(res) # None, т.к. не написаои return


def my_sum(a, b):
    a /b 
    a*b
    return a+b
res = my_sum(5, 4) # берет только 2 аргумента
print(res) # 9


def my_sum(a, b):
    return a +b , a- b, a/b
res = my_sum(5, 4)
print(res) # 9, 1, 1.25

"================= Параметры ================"
# пареметры - локальные переменные внутри функции , значения которым мы задаем при вызове функции(переенные ,которые мы указали внутри скобочек при создании функции (когда написали def))
# сначала определяем обьязательные ,потом с деволтом ,
"=================Виды параметров=================="
# 1. Обязательные  
# 2. Не обязательные 
# 2.1. по дефолту(со значениями по умолчанию ) (обьявляем переменную со знаечением через =)
# 2.2 args
# 2.3 kwargs
"==================== Аргументы =================="
# аргументы - значения , которые мы передаем параметрам при вызове функции
# сначала всегда передаюются позиционные потом имменованные 
"================ Виды аргументов ==================="
# 1. Позиционные 
# 2. Именованные 

def sum_or_add_10 (a,b=10):
    # b - параметр с дефолтом 10
    return a+b
print(sum_or_add_10(2,3)) # 5   
print(sum_or_add_10(5)) # 15   
print(sum_or_add_10(2,9)) # 11   
print(sum_or_add_10(15)) # 25

def func(*args,**kwargs):
    """
    args - tuple в который нам приходят все аргументы , которые мы записали через запятую(кроме обьязательных и по дефолту )

    kwargs -  dict, в который нам приходят все аргументы ,которые были переданы ввиде ключ=значение (кроме именованных)
    """
    print('args-', args)
    print('kwargs_', kwargs)

    print(args,kwargs)  # () {}
func(1,2,3,4,5,6,7,8,5,9,{'a':5},a=3,b=5)    
print(args,kwargs)  # (1,2,3,4,5,6,7,8,5,9,{'a':5}) {'a' : 3,'b' : 5}

def func2(a,b=5,*c,**d):
    print('a-', a)
    print('b-', b)
    print('c-', c)
    print('d-', d)

func2(10,20)
# a - 10
# b - 20
# c - ()
# d - {}

func2(10,20,30,40)
# a - 10 
# b - 20
# c - (30,40)
# d - {}

func2(10,20,30,40,a=5,b=6) # TypeError: func2() got multiple values for argument 'a'
# потому что в переменную а позиционно мы передали 10 , а именованно 5

func(10,20,30,40, c=5 ,d=6)
# a - 10
# b - 20
# c - (30,40)
# d - {'c':5, 'd':6}
"================= * ================"
# * -знак умножения
# * - распаковка
list_=[1,2,3,4,5]
list1=[*list_] # распаковываем значения в списке в новый список
print(id(list_) == id(list1)) # False


dict_= {'a':3, 'c':4}
dict2={*dict_}
print(dict2) # {c, a} выведет тольк ключи в неупорядоченном виде


dict_= {'a':3, 'c':4}
dict2={**dict_} 
print(dict2) 

len([1,2,3]) # 3
def my_len(obj):
    count = 0
    for i in obj:
        count = count +1 
    return count

print(my_len([1,2,3,4,5])) # 5
print(my_len(['dsaddaa'])) # 74




database = {
    "Бекзат" : "скала",
    "Эртай" : " пароль",
    "Оомат" : "Кыргызстан",
    "Имран" : "12345",
    "Жийде" : "return",
    "Манас" : "Маке",
    "Арафат" : "54321",
    "Элжаз" : "парол"
}
def login(**data):
    username = data.get('username')
    password = data.get('password')

    if username in database:
        if password == database[username]:
            print("Succes")
        else :
            print("Incorrect username")
login(username="Мырзайым", password="bootcamp21") # Incorrect password


